name: Launcher
run-name: Auto Update Version

on:
  schedule:
    - cron: 0 16 * * *
  push:
    branches:
      - main
  workflow_dispatch:

# 添加权限配置
permissions:
  contents: write

jobs:
  update:
    name: Update Launcher
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        include:
          - abbr: FCL
            github: https://github.com/FCL-Team/FoldCraftLauncher
    steps:
      - uses: actions/checkout@main
      - name: Handle files
        id: handle
        run: |
          git pull --rebase
          API=`echo ${{ matrix.github }} | sed 's/:\/\/github\.com\//:\/\/api.github.com\/repos\//g' | sed 's/$/\/releases/g'`
          wget -O latest.json $API/latest || echo '{"tag_name":""}' > latest.json
          wget -O releases.json $API
          
          # 检查 data 目录是否存在，不存在则创建
          if [ ! -d "data" ]; then
            mkdir -p data
          fi
          
          # 检查 launcher.json5 文件是否存在，不存在则创建一个基本的空白文件
          if [ ! -f "data/launcher.json5" ]; then
            echo '{
              "FCL": {
                "version": "0.0.0",
                "dev": {
                  "version": "0.0.0"
                }
              }
            }' > data/launcher.json5
            echo "创建了新的 launcher.json5 文件，因为原文件不存在"
          fi
          
          if [ '${{ matrix.device }}' ]; then
            DEVICE_LIST=`echo '${{ matrix.device }}' | sed 's/|/\\\\|/g'`
            sed -n '/\('"$DEVICE_LIST"'\)Launcher/,/]/p' data/launcher.json5 > launcher.json5
          else
            cp data/launcher.json5 launcher.json5
          fi
      - name: Get ${{ matrix.abbr }} version
        id: get
        run: |
          # Get Last Stable ${{ matrix.abbr }}
          LAST_STABLE_VERSION=`sed -n '/"${{ matrix.abbr }}"/,/"version":/p' launcher.json5 | sed -n '$p' | sed 's/^.*:\s*"v\?\|",$//gi' | sed 's/\./\\\\./g'`
          
          # Get Last Dev ${{ matrix.abbr }}
          LAST_DEV_VERSION=`sed -n '/"${{ matrix.abbr }}"/,/}/p' launcher.json5 | sed -n '/"dev":/,/"version":/p' | sed -n '$p' | sed 's/^.*:\s*"v\?\|"$//gi' | sed 's/\./\\\\./g'`
          
          # GET Latest Stable ${{ matrix.abbr }}
          if [ '${{ matrix.abbr }}' = HMCL ]; then
            LATEST_STABLE_VERSION=`cat releases.json | sed -n '/"tag_name":\s*"release-/p' | sed -n 1p | sed 's/^.*release-\|",$//g' | sed 's/\./\\\\./g'`
          else
            LATEST_STABLE_VERSION=`cat latest.json | jq .tag_name | sed 's/^"v\?\|"$//gi' | sed 's/\./\\\\./g'`
          fi
          if [ ${#LATEST_STABLE_VERSION} = 0 ]; then
            unset LAST_STABLE_VERSION
          fi
          
          # GET Latest Dev ${{ matrix.abbr }}
          if [ "$LAST_DEV_VERSION" ]; then
            LATEST_DEV_VERSION=`cat releases.json | sed -n '/"tag_name":/p' | sed -n 1p | sed 's/^.*:\s*"v\?\|",$//gi' | sed 's/\./\\\\./g'`
            if [[ '${{ matrix.abbr }}' = HMCL && "$LATEST_DEV_VERSION" = release-* ]]; then
              LATEST_DEV_VERSION=`cat releases.json | sed -n '/"tag_name": "[^r]/p' | sed -n 1p | sed 's/^.*:\s*"v\?\|",$//gi' | sed 's/\./\\\\./g'`
            fi
            if [ "$LATEST_DEV_VERSION" = "$LATEST_STABLE_VERSION" ]; then
              unset LATEST_DEV_VERSION
            fi
          fi
          
          # 储存最新版本号以便deploy任务使用
          LATEST_VERSION=`echo $LATEST_STABLE_VERSION | sed 's/\\\\././g'`
          echo "FCL_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
          
          # Remove Needless Files
          rm latest.json releases.json launcher.json5
          
          # Output
          echo "last_stable_version=$LAST_STABLE_VERSION" >> $GITHUB_OUTPUT
          echo "last_dev_version=$LAST_DEV_VERSION" >> $GITHUB_OUTPUT
          echo "latest_stable_version=$LATEST_STABLE_VERSION" >> $GITHUB_OUTPUT
          echo "latest_dev_version=$LATEST_DEV_VERSION" >> $GITHUB_OUTPUT
      - name: Modify launcher.json5
        id: modify
        run: |
          LAST_STABLE_VERSION='${{ steps.get.outputs.last_stable_version }}'
          LAST_DEV_VERSION='${{ steps.get.outputs.last_dev_version }}'
          LATEST_STABLE_VERSION='${{ steps.get.outputs.latest_stable_version }}'
          LATEST_DEV_VERSION='${{ steps.get.outputs.latest_dev_version }}'
          if [ '${{ matrix.device }}' ]; then
            DEVICE_STRING=' [${{ matrix.device }}]'
          else
            DEVICE_STRING=''
          fi
          if [ "$LATEST_STABLE_VERSION" ]; then
            if [ "$LAST_STABLE_VERSION" != "$LATEST_STABLE_VERSION" ]; then
              sed -i 's/\([/"v-]\)'"$LAST_STABLE_VERSION"'\(\.[a-z]\|["/-]\)/\1'"$LATEST_STABLE_VERSION"'\2/gi' data/launcher.json5
              LAST_STABLE_VERSION=`echo $LAST_STABLE_VERSION | sed 's/\\\\././g'`
              LATEST_STABLE_VERSION=`echo $LATEST_STABLE_VERSION | sed 's/\\\\././g'`
              CHANGELOG_E='  ${{ matrix.abbr }}(stable): '"$LAST_STABLE_VERSION => $LATEST_STABLE_VERSION$DEVICE_STRING"
            fi
          fi
          if [ "$LATEST_DEV_VERSION" ]; then
            if [ "$LAST_DEV_VERSION" != "$LATEST_DEV_VERSION" ]; then
              sed -i 's/\([/"v-]\)'"$LAST_DEV_VERSION"'\(\.[a-z]\|["/-]\)/\1'"$LATEST_DEV_VERSION"'\2/gi' data/launcher.json5
              LAST_DEV_VERSION=`echo $LAST_DEV_VERSION | sed 's/\\\\././g'`
              LATEST_DEV_VERSION=`echo $LATEST_DEV_VERSION | sed 's/\\\\././g'`
              if [ "$CHANGELOG_E" ]; then
                CHANGELOG_E="${CHANGELOG_E}"'#n  ${{ matrix.abbr }}(dev): '"$LAST_DEV_VERSION => $LATEST_DEV_VERSION$DEVICE_STRING"
              else
                CHANGELOG_E='  ${{ matrix.abbr }}(dev): '"$LAST_DEV_VERSION => $LATEST_DEV_VERSION$DEVICE_STRING"
              fi
            fi
          fi
          if [ "$CHANGELOG_E" ]; then
            CHANGELOG=`echo "$CHANGELOG_E" | sed 's/#n/\n/g'`
            echo ===============================================================
            echo "$CHANGELOG"
            echo ===============================================================
          fi
          MESSAGE='modify: update ${{ matrix.abbr }}
          
          [Auto] Update Launcher Version:
          '"$CHANGELOG
          (Time: `date +'%F %X %Z'`)"
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)  # To define the separator
          echo "message<<EOF"$'\n'"$MESSAGE"$'\n'EOF >> $GITHUB_OUTPUT  # For the multi-line output
      - name: Commit & Push
        id: commit_and_push
        uses: EndBug/add-and-commit@main
        with:
          default_author: github_actions
          message: ${{ steps.modify.outputs.message }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: update
    steps:
      - uses: actions/checkout@main

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.x

      - name: Install Docusaurus
        run: | 
          npm install

      - name: Build Docusaurus
        run: |
          npm run build
          
      - name: Deploy to Server
        uses: fifsky/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          user: ${{ secrets.HOST_USERNAME }}
          key: ${{ secrets.KEY }}
          pass: ${{ secrets.HOST_PASSWORD }}
          args: -o StrictHostKeyChecking=no
          command: |
            # 在服务器上创建必要的目录
            mkdir -p /tmp/fcl-deploy /tmp/fcl-updates
            
            # 清理旧的临时文件
            rm -rf /tmp/fcl-deploy/* /tmp/fcl-updates/*
      
      - name: Copy Docusaurus to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.KEY }}
          password: ${{ secrets.HOST_PASSWORD }}
          source: "build/"
          target: "/tmp/fcl-deploy"
          
      - name: Run remote commands
        id: run
        uses: fifsky/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          user: ${{ secrets.HOST_USERNAME }}
          key: ${{ secrets.KEY }}
          pass: ${{ secrets.HOST_PASSWORD }}
          args: -o StrictHostKeyChecking=no
          command: |
            # 部署Docusaurus构建文件
            cd /tmp/fcl-deploy
            if [ -d "./build" ]; then
              mkdir -p /1p/1panel/apps/openresty/openresty/www/sites/fcl.ningmo.fun/index/
              cp -R ./build/* /1p/1panel/apps/openresty/openresty/www/sites/fcl.ningmo.fun/index/
              echo "Deployed build files successfully"
            fi
            
            # 转到FCL下载目录
            cd /tmp/fcl-updates
            
            # 获取FCL最新版本
            FCL_VERSION="${{ env.FCL_VERSION }}"
            echo "FCL版本: $FCL_VERSION"
            
            # 下载函数，包含重试逻辑
            download_file() {
              local url=$1
              local output=$2
              local max_retries=3
              local retry=0
              
              while [ $retry -lt $max_retries ]; do
                echo "尝试下载 $url (尝试 $((retry+1))/$max_retries)"
                wget -q "$url" -O "$output" 
                
                if [ -f "$output" ] && [ -s "$output" ]; then
                  echo "✅ $output 下载成功"
                  return 0
                else
                  echo "❌ $output 下载失败或为空"
                  retry=$((retry+1))
                  if [ $retry -lt $max_retries ]; then
                    echo "等待5秒后重试..."
                    sleep 5
                  fi
                fi
              done
              
              return 1
            }
            
            # 下载FCL启动器的三个版本
            echo "正在下载x86版本..."
            download_file "https://github.com/FCL-Team/FoldCraftLauncher/releases/download/v${FCL_VERSION}/FCL-v${FCL_VERSION}-x86.apk" "FCL-v${FCL_VERSION}-x86.apk"
            
            echo "正在下载arm64版本..."
            download_file "https://github.com/FCL-Team/FoldCraftLauncher/releases/download/v${FCL_VERSION}/FCL-v${FCL_VERSION}-arm64.apk" "FCL-v${FCL_VERSION}-arm64.apk"
            
            echo "正在下载all版本..."
            download_file "https://github.com/FCL-Team/FoldCraftLauncher/releases/download/v${FCL_VERSION}/FCL-v${FCL_VERSION}-all.apk" "FCL-v${FCL_VERSION}-all.apk"
            
            # 创建版本索引文件
            echo "{\"version\":\"$FCL_VERSION\",\"releaseTime\":\"$(date +'%Y-%m-%d')\"}" > version.json
            
            # 列出下载的文件
            echo "已下载的文件:"
            ls -la
            
            # 检查至少有一个文件下载成功
            if [ ! -f "FCL-v${FCL_VERSION}-x86.apk" ] && [ ! -f "FCL-v${FCL_VERSION}-arm64.apk" ] && [ ! -f "FCL-v${FCL_VERSION}-all.apk" ]; then
              echo "错误：所有版本下载均失败，无法继续部署"
              exit 1
            fi
            
            # 一次性部署FCL启动器文件到两个目标位置
            for TARGET in "/1p/1panel/apps/openresty/openresty/www/sites/cf.ningmo.fun/index/fcl" "/1p/1panel/apps/openresty/openresty/www/sites/fcl.ningmo.fun/index/fcl"; do
              mkdir -p $TARGET
              cp -R * $TARGET/
              echo "部署到 $TARGET 完成"
            done
            
            # 清理临时文件
            cd /tmp
            rm -rf fcl-deploy fcl-updates
